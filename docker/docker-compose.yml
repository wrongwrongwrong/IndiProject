# Docker Compose for local development
# This file is for development only - production uses Kubernetes

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gameserver-postgres
    environment:
      POSTGRES_DB: gameserver_db
      POSTGRES_USER: gameserver_user
      POSTGRES_PASSWORD: secure_password_change_me
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - gameserver-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: gameserver-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gameserver-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password

  # User Service
  user-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gameserver-user-service
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://gameserver_user:secure_password_change_me@postgres:5432/gameserver_db
      REDIS_URL: redis://:redis_password@redis:6379
      JWT_SECRET: your_jwt_secret_key_here
      PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - gameserver-network
    restart: unless-stopped
    command: node services/user-service.js

  # Wallet Service (High Security)
  wallet-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gameserver-wallet-service
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://gameserver_user:secure_password_change_me@postgres:5432/gameserver_db
      REDIS_URL: redis://:redis_password@redis:6379
      JWT_SECRET: your_jwt_secret_key_here
      ENCRYPTION_KEY: your_32_character_encryption_key_here
      PAYMENT_GATEWAY_URL: https://api.stripe.com/v1
      PAYMENT_GATEWAY_KEY: your_payment_gateway_key_here
      PORT: 3002
    ports:
      - "3002:3002"
    depends_on:
      - postgres
      - redis
    networks:
      - gameserver-network
    restart: unless-stopped
    command: node services/wallet-service.js
    # Security: Run as non-root user
    user: "1001:1001"

  # Description Service
  description-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gameserver-description-service
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://gameserver_user:secure_password_change_me@postgres:5432/gameserver_db
      REDIS_URL: redis://:redis_password@redis:6379
      PORT: 3003
    ports:
      - "3003:3003"
    depends_on:
      - postgres
      - redis
    networks:
      - gameserver-network
    restart: unless-stopped
    command: node services/description-service.js

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gameserver-api-gateway
    environment:
      NODE_ENV: development
      USER_SERVICE_URL: http://user-service:3001
      WALLET_SERVICE_URL: http://wallet-service:3002
      DESCRIPTION_SERVICE_URL: http://description-service:3003
      JWT_SECRET: your_jwt_secret_key_here
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      - user-service
      - wallet-service
      - description-service
    networks:
      - gameserver-network
    restart: unless-stopped
    command: node services/api-gateway.js

  # Nginx Load Balancer
  nginx:
    image: nginx:1.24-alpine
    container_name: gameserver-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api-gateway
    networks:
      - gameserver-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  gameserver-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
